{"version":3,"sources":["webpack:///src/app/tab2/tab2.page.html","webpack:///src/app/tab2/tab2.module.ts","webpack:///src/app/tab2/tab2.page.scss","webpack:///src/app/tab2/tab2.page.ts"],"names":["Tab2PageModule","imports","forChild","path","component","declarations","Geolocation","Toast","Tab2Page","nativeGeocoder","ngZone","showingCurrent","setCurrentPosition","getCurrentPosition","coordinates","run","lat","coords","latitude","lng","longitude","address","options","useLocale","maxResults","forwardGeocode","then","result","parseFloat","error","console","log","show","text","selector","template"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCkBFA,cAAc;AAAA;AAAA,O;;AAAdA,oBAAc,6DAV1B,+DAAS;AACRC,eAAO,EAAE,CACP,0DADO,EAEP,4DAFO,EAGP,0DAHO,EAIP,uDAJO,EAKP,6DAAaC,QAAb,CAAsB,CAAC;AAAEC,cAAI,EAAE,EAAR;AAAYC,mBAAS,EAAE;AAAvB,SAAD,CAAtB,CALO,CADD;AAQRC,oBAAY,EAAE,CAAC,mDAAD;AARN,OAAT,CAU0B,GAAdL,cAAc,CAAd;;;;;;;;;;;;;;;;AClBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCCEgB,uD;UAAvBM,W,yBAAAA,W;UAAaC,K,yBAAAA,K;;UAORC,QAAQ;AAKnB,0BAAoBC,cAApB,EAA4DC,MAA5D,EAA4E;AAAA;;AAAxD,eAAAD,cAAA,GAAAA,cAAA;AAAwC,eAAAC,MAAA,GAAAA,MAAA;AAF5D,eAAAC,cAAA,GAA0B,IAA1B;AAE+E;;AAL5D;AAAA;AAAA,qCAOR;AACT,iBAAKC,kBAAL;AACD;AATkB;AAAA;AAAA,+CAWQ;;;;;;;;;;AACL,6BAAMN,WAAW,CAACO,kBAAZ,EAAN;;;AAAdC,iC;AACN,2BAAKJ,MAAL,CAAYK,GAAZ,CAAgB,YAAM;AACpB,6BAAI,CAACC,GAAL,GAAWF,WAAW,CAACG,MAAZ,CAAmBC,QAA9B;AACA,6BAAI,CAACC,GAAL,GAAWL,WAAW,CAACG,MAAZ,CAAmBG,SAA9B;AACD,uBAHD;AAIA,2BAAKT,cAAL,GAAsB,IAAtB;;;;;;;;;AACD;AAlBkB;AAAA;AAAA,oCAoBH;;;;;;;;;4BACV,KAAKU,OAAL,IAAgB,E;;;;;AACdC,6B,GAAiC;AACnCC,iCAAS,EAAE,IADwB;AAEnCC,kCAAU,EAAE;AAFuB,uB;AAIrC,2BAAKf,cAAL,CAAoBgB,cAApB,CAAmC,KAAKJ,OAAxC,EAAiDC,OAAjD,EACGI,IADH,CACQ,UAACC,MAAD,EAAoC;AACxC,8BAAI,CAACjB,MAAL,CAAYK,GAAZ,CAAgB,YAAM;AACpB,gCAAI,CAACC,GAAL,GAAWY,UAAU,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUT,QAAX,CAArB;AACA,gCAAI,CAACC,GAAL,GAAWS,UAAU,CAACD,MAAM,CAAC,CAAD,CAAN,CAAUP,SAAX,CAArB,CAFoB,CAGpB;AACA;AACD,yBALD;;AAMA,8BAAI,CAACT,cAAL,GAAsB,KAAtB;AACD,uBATH,WAUS,UAACkB,KAAD;AAAA,+BAAgBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAhB;AAAA,uBAVT;;;;;;AAaA,6BAAMtB,KAAK,CAACyB,IAAN,CAAW;AACfC,4BAAI,EAAE;AADS,uBAAX,CAAN;;;;;;;;;AAIH;AA3CkB;;AAAA;AAAA,S;;;;gBANZ;;gBAHW;;;;AASPzB,cAAQ,6DALpB,gEAAU;AACT0B,gBAAQ,EAAE,UADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,0FAFS;;;;AAAA,OAAV,CAKoB,GAAR3B,QAAQ,CAAR","file":"tab2-tab2-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-title>\\r\\n      Google Map\\r\\n    </ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <agm-map [usePanning]=\\\"true\\\" [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [zoom]=\\\"12\\\" [disableDefaultUI]=\\\"false\\\">\\r\\n    <agm-marker [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [markerDraggable]=true></agm-marker>\\r\\n  </agm-map>\\r\\n  <ion-grid class=\\\"status-grid\\\">\\r\\n    <ion-row>\\r\\n      <ion-col *ngIf=\\\"showingCurrent\\\">\\r\\n        Showing Current Location\\r\\n      </ion-col>\\r\\n      <ion-col *ngIf=\\\"!showingCurrent\\\">\\r\\n        Showing Geocoded Location\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n  <ion-button color=\\\"success\\\" (click)=\\\"setCurrentPosition()\\\" expand=\\\"full\\\" class=\\\"ion-margin\\\">Show My Location\\r\\n  </ion-button>\\r\\n\\r\\n  <ion-item>\\r\\n    <ion-label position=\\\"stacked\\\">Enter Address to Geocode</ion-label>\\r\\n    <ion-input type=\\\"text\\\" [(ngModel)]=\\\"address\\\" name=\\\"address\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-row class=\\\"ion-padding-horizontal ion-padding-top\\\" *ngIf=\\\"!showingCurrent\\\">\\r\\n    <ion-text class=\\\"coords\\\">My Latitude : {{lat}}</ion-text>\\r\\n  </ion-row>\\r\\n  <ion-row class=\\\"ion-padding-horizontal\\\" *ngIf=\\\"!showingCurrent\\\">\\r\\n    <ion-text class=\\\"coords\\\">My Longitude : {{lng}}</ion-text>\\r\\n  </ion-row>\\r\\n  <ion-button color=\\\"success\\\" (click)=\\\"geocode()\\\" expand=\\\"full\\\" class=\\\"ion-margin\\\">\\r\\n    Geocode Address</ion-button>\\r\\n\\r\\n</ion-content>\";","import { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Tab2Page } from './tab2.page';\r\nimport { AgmCoreModule } from '@agm/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n    IonicModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    AgmCoreModule,\r\n    RouterModule.forChild([{ path: '', component: Tab2Page }])\r\n  ],\r\n  declarations: [Tab2Page]\r\n})\r\nexport class Tab2PageModule { }\r\n","export default \"agm-map {\\n  height: 50vh;\\n}\\n\\nagm-map .gm-svpc {\\n  display: none;\\n}\\n\\n.status-grid {\\n  background-color: black;\\n  color: white;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGFiMi90YWIyLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFlBQUE7QUFDRjs7QUFHRTtFQUNFLGFBQUE7QUFBSjs7QUFHQTtFQUNFLHVCQUFBO0VBQ0EsWUFBQTtBQUFGIiwiZmlsZSI6InNyYy9hcHAvdGFiMi90YWIyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImFnbS1tYXAge1xyXG4gIGhlaWdodDogNTB2aDtcclxufVxyXG5cclxuYWdtLW1hcCB7XHJcbiAgLmdtLXN2cGMge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbn1cclxuLnN0YXR1cy1ncmlkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICBjb2xvcjogd2hpdGU7XHJcbn1cclxuIl19 */\";","import { Component, NgZone } from '@angular/core';\r\nimport { Plugins } from '@capacitor/core';\r\nconst { Geolocation, Toast } = Plugins;\r\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\r\n@Component({\r\n  selector: 'app-tab2',\r\n  templateUrl: 'tab2.page.html',\r\n  styleUrls: ['tab2.page.scss']\r\n})\r\nexport class Tab2Page {\r\n  public lat: any;\r\n  public lng: any;\r\n  showingCurrent: boolean = true;\r\n  address: string;\r\n  constructor(private nativeGeocoder: NativeGeocoder, private ngZone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    this.setCurrentPosition();\r\n  }\r\n\r\n  async setCurrentPosition() {\r\n    const coordinates = await Geolocation.getCurrentPosition();\r\n    this.ngZone.run(() => {\r\n      this.lat = coordinates.coords.latitude;\r\n      this.lng = coordinates.coords.longitude;\r\n    })\r\n    this.showingCurrent = true;\r\n  }\r\n\r\n  async geocode() {\r\n    if (this.address != \"\") {\r\n      let options: NativeGeocoderOptions = {\r\n        useLocale: true,\r\n        maxResults: 5\r\n      };\r\n      this.nativeGeocoder.forwardGeocode(this.address, options)\r\n        .then((result: NativeGeocoderResult[]) => {\r\n          this.ngZone.run(() => {\r\n            this.lat = parseFloat(result[0].latitude);\r\n            this.lng = parseFloat(result[0].longitude);\r\n            // this.myMap.triggerResize()\r\n            //   .then(() => (this.myMap as any)._mapsWrapper.setCenter({ lat: this.lat, lng: this.lng }));\r\n          })\r\n          this.showingCurrent = false;\r\n        })\r\n        .catch((error: any) => console.log(error));\r\n    }\r\n    else {\r\n      await Toast.show({\r\n        text: 'Please add address to Geocode'\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}